name: CI

on:
  push:
    branches:
      - main
  pull_request: ~
  workflow_dispatch: ~

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Pull images
        run: docker compose pull --ignore-pull-failures || true
      - name: Start services
        run: docker compose up --build -d
      - name: Wait for services
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker compose ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy)
                docker compose ps
                docker compose logs
                exit 1
              ;;
            esac
          done
          exit 1
      - name: Check HTTP reachability
        run: curl -v -o /dev/null http://localhost
      - name: Check API reachability
        run: curl -vk -o /dev/null https://localhost
      - name: Check PWA reachability
        run: "curl -vk -o /dev/null -H 'Accept: text/html' https://localhost"
      - name: Create test database
        run: |
          docker compose exec -T php bin/console -e test doctrine:database:create
          docker compose exec -T php bin/console -e test doctrine:schema:update --force --no-interaction
      - name: PHPUnit
        run: docker compose exec -T php bin/phpunit
  docker:
    runs-on: ubuntu-latest
    env:
        working-directory: ./api
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: "{{defaultContext}}:api"
          push: true
          tags: matthieucmp/test-ci:latest
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: | 
            cd /var/www/html/
            if [ ! -d challenge-api-platform-vue ]; then
              git clone git@github.com:kidelag/challenge-api-platform-vue.git
              cd challenge-api-platform-vue/api
              echo "APP_ENV=prod" > .env
              echo "APP_SECRET=SECRET_KEY" >> .env
              echo "TRUSTED_PROXIES=127.0.0.1" >> .env
              echo "TRUSTED_HOSTS=^challenge.matthieucmp.eu$" >> .env
              echo "DATABASE_URL=${{ secrets.ENV_SQL }}" >> .env
              echo "CORS_ALLOW_ORIGIN='^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$'" >> .env
              echo "JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem" >> .env
              echo "JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem" >> .env
              echo "JWT_PASSPHRASE=${{ secrets.JWT_PASSPHRASE }}" >> .env
              echo "MERCURE_URL=${{ secrets.MERCURE_URL }}" >> .env
              echo "MERCURE_PUBLIC_URL=${{ secrets.MERCURE_PUBLIC_URL }}" >> .env
              echo "MERCURE_JWT_SECRET=${{ secrets.MERCURE_JWT_SECRET }}" >> .env
              echo "CORS_ALLOW_ORIGIN=['*']" >> .env
              composer install
              bin/console d:s:u --force
              cd /var/www/html/
            fi
            cd challenge-api-platform-vue
            git pull
            cd api
            composer install
            cd ..
            cd pwa
            echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" > .env
            npm install
            npm run build
